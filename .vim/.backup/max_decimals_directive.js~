define("AngularNumbers.MaxDecimalsDirective", function(module) {
  module.exports = function(decimalSeparator) {
    var d = {
      restrict: 'A',

      link: function(scope, element, attrs) {
        var maxDecimals = Number(attrs.nuMaxDecimals)

        element.on('keypress', function(ev) {
          var value = $(ev.currentTarget).val()
          var caretPosition = ev.target.selectionStart

          d.whenNewValueExceedsDecimalLimit(value, caretPosition, maxDecimals, function() {
            ev.preventDefault()
          })
        })
      },

      whenNewValueExceedsDecimalLimit: function(value, caretPosition, maxDecimals, fn) {
        var isNewValueExceedingDecimalLimit = isCaretAfterDecimalSeparator(decimalSeparator, value, caretPosition) &&
                                              isDecimalPlacesGTEMax(decimalSeparator, value, maxDecimals)
        if (isNewValueExceedingDecimalLimit) { fn() }
      }
    }
    return d
  }

  function isCaretAfterDecimalSeparator(decimalSeparator, value, caretPosition) {
    var integerPart = destructureDecimal(decimalSeparator, value).integerPart
    return caretPosition > integerPart.length
  }

  function isDecimalPlacesGTEMax(decimalSeparator, value, maxDecimals) {
    var fractionalPart = destructureDecimal(decimalSeparator, value).fractionalPart
    return fractionalPart && fractionalPart.length + 1 > maxDecimals
  }

  function destructureDecimal(decimalSeparator, value) {
    var valueParts = value.toString().split(decimalSeparator())
    return {
      integerPart: valueParts[0],
      fractionalPart: valueParts[1]
    }
  }
})
