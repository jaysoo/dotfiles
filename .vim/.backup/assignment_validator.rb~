module Inventory::AssignmentValidator
  extend self

  def validate_pallet(pallet, reservable=nil)
    assigned_for = PalletAssignmentRepository.find_assigned_for(pallet)
    if assigned_for.present?
      error_message = nil

      if assigned_for == reservable
        reservable_type = reservable.class.humanize_class_name
        error_message = s_("ERROR_MSG|The inventory has already been Assigned to this {{{reservable_type}}}").i(reservable_type: reservable_type)
      else
        assign_link = ClassyError.encode_object(assigned_for)
        error_message = s_("ERROR_MSG|The inventory has already been Assigned to {{{assign_link}}}").i(:assign_link => assign_link)
      end

      return error_message
    end
  end

  def validate_pallet_change(unit_move)
    from_pallet = unit_move.from_pallet
    to_pallet = unit_move.to_pallet
    unless PalletAssignmentComparator.assigned_to_same?(from_pallet, to_pallet)
      assign_link1 = assigned_link(from_pallet)
      assign_link2 = assigned_link(to_pallet)
      s_("Inventory cannot be moved because Pallet '{{{from_pallet}}}' is assigned to {{{assigned_to_1}}} and Pallet '{{{to_pallet}}}' is assigned to {{{assigned_to_2}}}.").i(from_pallet: PalletFormatter.humanize(from_pallet), to_pallet: PalletFormatter.humanize(to_pallet), assigned_to_1: assign_link1, assigned_to_2: assign_link2)
    end
  end

  private

  def assigned_link(pallet)
    assigned_link = ClassyError.encode_object(PalletAssignmentRepository.find_assigned_for(pallet), 'nothing')
  end
end
