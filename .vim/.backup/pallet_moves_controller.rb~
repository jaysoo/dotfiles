class PalletMovesController < ApplicationController
  skip_before_filter :check_permissions
  permit "account"
  permit "mod_inventory"

  def create_many
    set_line_name
    @pallet_move_creator = Moves::PalletMoveCreator.new params[:pallet_move_creator].merge(:move => @move)
    @pallet_move_creator.create

    respond_to do |f|
      f.json do
        data = Wms::PalletMoveSerializer.serialize_pallet_move(@pallet_move_creator)
        presenter = Wms::MovePresenter.new(@move.reload)
        data[:quantity_to_move] = presenter.picked_inventory_by_item_as_json
        data[:moved_inventory] = presenter.moved_inventory_as_json

        if data[:errors]
          render :json => data, :status => 422
        else
          render :json => data
        end
      end
      f.js {render :template => "pallet_moves/create_many.js.rjs"}
    end
  end

  def create_from_expected
    set_line_name
    selected_ids = params[:checked_expected_pallet_moves].split(',')
    selected_expecteds = @move.expected_pallet_moves.find_all_by_id(selected_ids)
    @move.move_pallets selected_expecteds

    Jobs::JobLotExpiriesAdjuster.update(@move.job)
    render :template => 'pallet_moves/create_many'
  end

  in_line_ajax_action :page do |page|
    move = current_user.site.moves.find(params[:move_id])
    page.replace(:paged_pallet_moves_table, :partial => 'pallet_moves/table', :locals => {:move => move})
  end

private
  def set_line_name
    load_move
    @line_name = @move.job.try(:line_name) || params[:line_name]
  end

  def load_move
    @move = current_user.site.moves.find(params[:move_id])
  end
end
