define("AngularNumbers", function(module) {
  var m = angular.module('numbers', [])

  m.value('decimalSeparator', function() {
    return $.format.locale().number.decimalSeparator
  })

  m.directive('nuMaxDecimals', [
    'decimalSeparator',

    function(decimalSeparator) {
      var d = {
        restrict: 'A',

        link: function(scope, element, attrs) {
          var maxDecimals = Number(attrs.nuMaxDecimals)
          element.on('keypress', _.bind(d.restrictDecimalsOnKeyPress, this, maxDecimals))
        },

        restrictDecimalsOnKeyPress: function(maxDecimals, ev) {
          var value = $(ev.currentTarget).val()
          var caretPosition = ev.target.selectionStart

          d.whenNewValueExceedsDecimalLimit(value, caretPosition, maxDecimals, function() {
            ev.preventDefault()
          })
        },

        whenNewValueExceedsDecimalLimit: function(value, caretPosition, maxDecimals, fn) {
          var isNewValueExceedingDecimalLimit = d.isCaretAfterDecimalSeparator(value, caretPosition) &&
                                                d.isDecimalPlacesGTEMax(value, maxDecimals)

          if (isNewValueExceedingDecimalLimit) { fn() }
        },

        isCaretAfterDecimalSeparator: function(value, caretPosition) {
          var integerPart = d.destructureDecimal(value).integerPart
          return caretPosition > integerPart.length
        },

        isDecimalPlacesGTEMax: function(value, maxDecimals) {
          var fractionalPart = d.destructureDecimal(value).fractionalPart
          return fractionalPart && fractionalPart.length + 1 > maxDecimals
        },

        destructureDecimal: function(value) {
          var valueParts = value.toString().split(decimalSeparator())
          return {
            integerPart: valueParts[0],
            fractionalPart: valueParts[1]
          }
        }
      }
      return d
    }
  ])

  module.exports = m
})
