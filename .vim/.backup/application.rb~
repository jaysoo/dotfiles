AUTHORIZATION_MIXIN = "hardwired"

require File.expand_path('../boot', __FILE__)

require 'rails/all'
require File.expand_path('../../lib/angular_template_handler', __FILE__)

if defined?(Bundler)
  # If you precompile assets before deploying to production, use this line
  Bundler.require(*Rails.groups(:assets => %w(development test)))
  # If you want your assets lazily compiled in production, use this line
  # Bundler.require(:default, :assets, Rails.env)
end

STORE_LOCATION_METHOD = "store_location"

module Packmanager
  class Application < Rails::Application
    # Settings in config/environments/* take precedence over those specified here.
    # Application configuration should go into files in config/initializers
    # -- all .rb files in that directory are automatically loaded.

    # Custom directories with classes and modules you want to be autoloadable.
    # config.autoload_paths += %W(#{config.root}/extras)
    config.autoload_paths += %W(#{config.root}/lib
                                #{config.root}/app/serializers
                                #{config.root}/app/presenters)

    config.eager_load_paths += Dir["#{config.root}/domain/**"]

    # don't load helpers eagerly, so zeus doesn't load all environment when modifying helpers
    config.action_controller.include_all_helpers = false

    # config.active_record.schema_format = :sql

    # Only load the plugins named here, in the order given (default is alphabetical).
    # :all can be used as a placeholder for all plugins not explicitly named.
    # config.plugins = [ :exception_notification, :ssl_requirement, :all ]

    # Activate observers that should always be running.
    config.active_record.observers = \
      "api/edi/v2/edi_observer",
      "api/edi/mcl/clorox/edi_observer",
      "api/edi/exel/clorox/edi_observer",
      "api/edi/mcl/conagra/edi_observer",
      "api/edi/belvika/hershey/edi_observer",
      "api/edi/strive/kraft/edi_observer",
      "api/edi/exel/standard/edi_observer",
      "api/edi/uc/sony/edi_observer",
      "icg/line_observer",
      "icg/shift_observer",
      "api/cpi_observer",
      "wms/inventory_observer",
      "skus/restrict_modification_observer"

    # Set Time.zone default to the specified zone and make Active Record auto-convert to this zone.
    # Run "rake -D time" for a list of tasks for finding time zone names. Default is UTC.
    # config.time_zone = 'Central Time (US & Canada)'

    # The default locale is :en and all translations from config/locales/*.rb,yml are auto loaded.
    # config.i18n.load_path += Dir[Rails.root.join('my', 'locales', '*.{rb,yml}').to_s]
    # config.i18n.default_locale = :de
    config.i18n.load_path += Dir[Rails.root.join('config', 'locales', 'i18n', '**', '*.{rb,yml}')]

    # JavaScript files you want as :defaults (application.js is always included).
    # config.action_view.javascript_expansions[:defaults] = %w(jquery rails)

    # Configure the default encoding used in templates for Ruby 1.9.
    config.encoding = "utf-8"

    # Configure sensitive parameters which will be filtered from the log file.
    config.filter_parameters += [:password, :password_confirmation, :uploaded_data]

    Authlogic::ActsAsAuthentic::Password::REST_AUTH_SITE_KEY = ''

    # We turn this off so that we can more narrowly control when to turn on optimistic locking
    ActiveRecord::Base.lock_optimistically = false

    config.assets.enabled = true

    # Version of your assets, change this if you want to expire all your assets
    config.assets.version = '1.0'

    config.assets.paths += [Rails.root.join('client')]

    Sprockets.register_engine '.html', AngularTemplateHandler

    # Change the path that assets are served from
    # config.assets.prefix = "/assets"

    # default config that also whitelists templates
    if Rails.env.development?
      config.dev_tweaks.autoload_rules do
        keep :all

        skip '/favicon.ico'
        skip :assets
        keep /templates/
        keep :xhr
        keep :forced
      end
    end

    Rails.backtrace_cleaner.remove_silencers!

    GC::Profiler.enable
  end
end
