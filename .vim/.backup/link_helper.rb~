module LinkHelper
  include TooltipHelper
  include BootstrapButtonHelper

  # Due to the fact that all link methods are supposed to be in here, we override the rails helper methods here rather
  # than the environments.rb.  This linkhelper is always loaded in by the application helper.
  #
  # 2008-09-15: We'll keep this code uncommented for now because we will probably be adding a new tooltip framework
  # in again later and we'll probably use a similar implementation to add the new framework.

  # override: apply the javascript tooltip in our framework and suppress the html tooltips across the application
  def link_to(name, options = {}, html_options = nil)
    add_tooltip(html_options)
    super
  end

  def add_tooltip html_options
    if html_options && html_options[:title]
      html_options ||= {}
      html_options.merge!(:'data-tooltip' => clean_tooltip_html(html_options.delete(:title)))
    end
  end

  # Only used as an inline table action.

  def delete_title
    image_tag "icons/delete.png", :alt => s_("BTN_MSG|Delete")
  end

  # Only used as an inline table action.
  def edit_title
    image_tag "icons/edit.png", :alt => s_("IMG_ALT_MSG|Edit")
  end

  # Only used as an inline table action.
  def update_title
    image_tag "icons/update.gif", :alt => s_("IMG_ALT_MSG|Update")
  end

  # Only used as an inline table action.  (only used in the table_helper)
  def save_title
    image_tag "icons/save-alt.png", :alt => s_("IMG_ALT_MSG|Save")
  end

  # Only used as an inline table action.  (only used in the table_helper)
  def cancel_title
    image_tag "icons/delete-alt.png", :alt => s_("IMG_ALT_MSG|Cancel")
  end

  def details_title
    image_tag "icons/details.png", :alt => s_("IMG_ALT_MSG|Details")
  end

  def worksheet_title
    image_tag('icons/file-edit.png', :alt => s_("IMG_ALT_MSG|Sheet"))
  end

  def search_file_title
    image_tag('icons/search-file.png', alt: s_("IMG_ALT_MSG|Search"))
  end

  def auto_adjust_title
    image_tag('icons/adjust-levels.png', :alt => s_("IMG_ALT_MSG|Auto adjust"))
  end

  def show_title toggle_name=nil
    return _("Show {{{button_function}}}").i(:button_function =>  toggle_name) if toggle_name
    s_("LINK_HELPER_LBL|Show")
  end

  def hide_title toggle_name=nil
    return _("Hide {{{button_function}}}").i(:button_function =>  toggle_name) if toggle_name
    s_("LINK_HELPER_LBL|Hide")
  end

  def add_title
    image_tag "icons/add.png", :alt => s_("IMG_ALT_MSG|Add")
  end

  def add_pallet_title
    image_tag "icons/add_pallet.png", :alt => s_("IMG_ALT_MSG|Add pallet to cart")
  end

  def add_pallet_disable_title
    image_tag "icons/add_pallet_disabled.png", :alt => s_("IMG_ALT_MSG|Add pallet to cart")
  end

  def remove_pallet_title
    image_tag "icons/remove_pallet.png", :alt => s_("IMG_ALT_MSG|Remove pallet from cart")
  end

  def remove_pallet_disable_title
    image_tag "icons/remove_pallet_disabled.png", :alt => s_("IMG_ALT_MSG|Remove pallet from cart")
  end

  def add_quantity_to_cart_title
    image_tag "icons/add_units.png", :alt => s_("IMG_ALT_MSG|Add quantity to cart")
  end

  def add_quantity_to_cart_disable_title
    image_tag "icons/add_units_disabled.png", :alt => s_("IMG_ALT_MSG|Add quantity to cart")
  end

  def remove_quantity_title
    image_tag "icons/unit-minus.png", :alt => s_("IMG_ALT_MSG|Remove pallet from cart")
  end

  def remove_quantity_disable_title
    image_tag "icons/unit-minus-disabled.png", :alt => s_("IMG_ALT_MSG|Remove pallet from cart")
  end

  def link_to_edit path, title = edit_title, html_options = {}
    link_to title.html_safe, path, html_options
  end

  # Should be used when the link is specified on the show page of the object that you want to deleted (on the
  # top right corner of the page).  Usually has the "Delete Quote" with the delete icon specified in CSS to the left
  # of the text.
  # TODO: the title parameter should always be specified, and when that refactoring is done, use the "button delete" css
  # class instead. Ticket #538.
  # DEPRECATED: use nui_button_delete instead
  def link_to_delete path, title = delete_title, html_options = {}
    link_to title.html_safe, path, {:confirm => _('Are you sure you want to delete this?'), :method => :delete, :class => 'no_print'}.merge(html_options)
  end

  def link_to_create_move
  end

  # A drop-in replacement for link_to_delete, to make an Ajax call instead.
  # This method should be used for the delete action in tables since you do not want to necessarily refresh the whole
  # page, just the table.
  #
  # Most users of this method should Set the :name option to the name of the object, to generate a user-friendly warning.
  def link_to_delete_remote object, path, options = {}
    options[:title] ||= delete_title
    options[:confirm] ||= _("Are you sure you want to delete this?")
    options[:confirm] ||= _("Are you sure you want to delete this {{{type_of_record}}}?").i(:type_of_record => options[:name]) if options[:name]
    options[:class] = options[:class] ? "no_print #{options[:class]}" : "no_print"
    options[:method] ||= :delete

    js = <<-HTML
      $$("##{table_row_id(object)} div.actions span.spinner").each(function(s) { s.show() });
      $$("##{table_row_id(object)} div.actions a").each(function(s) { s.hide() });
    HTML

    link_to options[:title], path, options.merge(:'data-bad-after' => js, :id => "delete_#{object.class.to_s.underscore}_#{object.id}", :title => _("Delete"), :remote => true)
  end

  # Method for creating delete links. Supports most objects.
  def link_to_delete_object object, options={}
    case object.class.to_s
    when "Announcement" then link_to_delete announcement_path(object), title(:icon_path => "icons/delete.png", :title => "Delete Announcement"), :class => "button" if permit? User::SUPER_USER
    when "AssemblyStep" then link_to_delete_remote object, assembly_procedure_assembly_step_path(object.assembly_procedure, object), :name => "assembly step" if permit? User::LEAD
    when "AssemblyItemTemplate" then link_to_delete_remote object, assembly_item_template_path(object, :page => params[:page]), :name => "assembly item template" if permit? User::ACCOUNT_ADMIN
    when "BadgeType" then link_to_delete_remote object, site_badge_type_path(:site_id => object.site_id, :id => object.id, :page => params[:page], :escape => false), :name => "badge type" if permit? User::SUPER_USER
    when "BomItem" then
      if permit? "supervisor"
        if object.substitute_for
          link_to_delete_remote object, sku_substitute_bom_item_path(object.sku, object), :name => "substitute subcomponent" if permit? "supervisor"
        else
          link_to_delete_remote object, sku_bom_item_path(object.sku, object), :name => "subcomponent" if permit? "supervisor"
        end
      end
    when "Bookmark" then link_to_delete_remote object, bookmark_path(object), :name => "bookmark" if object.modifiable_by?(current_user)
    when "Break" then
      link_to_delete_remote object,
      job_break_path({:job_id => object.job, :id => object, :page => params[:page], :escape => false}),
      :name => _("break") if permit? User::LEAD
    when "Bubble" then link_to_delete_remote object, bubble_path(:id => object.id, :page => params[:page]), :name => "bubble" if permit? "nulogy"
    when "Carrier" then link_to_delete_remote object, carrier_path(object, :page => params[:page]) if permitted? :carriers, :destroy
    when "CompanyLocale" then link_to_delete_remote object, company_locale_path(object) if permit? User::SUPER_USER
    when "CycleCountItem" then link_to_delete_remote object, cycle_count_item_path(object)
    when "Consignee" then link_to_delete_remote object, consignee_path(object) if permitted? :consignees, :destroy
    when "CustomOutput" then link_to_delete_remote object, custom_output_path(object) if permit? User::SUPER_USER
    when "DiscrepancyReason" then link_to_delete_remote object, discrepancy_reason_path(object) if permit? User::ACCOUNT_ADMIN
    when "EdiCustomer" then link_to_delete_remote object, edi_customer_path(object), :name => "customer" if permit? "site_admin and mod_edi"
    when "EdiCustomerTrigger" then link_to_delete_remote object, edi_customer_trigger_path(object)
    when "EdiMapping" then link_to_delete_remote object, edi_mapping_path(object), :name => "customer product code" if permit? "manager and mod_edi"
    when "EdiSkipLocation" then link_to_delete_remote object, edi_skip_location_path(object), :name => "skip location"
    when "EdiStatusLocation" then link_to_delete_remote object, edi_status_location_path(object), :name => "status location"
    when "EdiMappingItem" then link_to_delete_remote object, edi_mapping_item_path(object, :edi_mapping_id => object.edi_mapping_id)
    when "EmailDomain" then link_to_delete_remote object, email_domain_path(object)
    when "ExpectedPalletMove" then link_to_delete_remote object, move_expected_pallet_move_path(object.move, object, :page => params[:page]), :name => "item"
    when "ExpectedUnitMove" then link_to_delete_remote object, move_expected_unit_move_path(object.move, object, :page => params[:page])
    when "ExpiryDateFormat" then link_to_delete_remote object, expiry_date_format_path(object) if permit? User::SUPER_USER
    when "FloorLocation" then link_to_delete_remote(object, site_floor_location_path(:site_id => object.site_id, :id => object, :page => params[:page], :escape => false), :confirm => options[:confirm]) if permit? User::SUPER_USER
    when "ItemCategory" then link_to_delete_remote object, item_category_path(object), :name => "item category" if permit? User::MANAGER and object.skus.count == 0
    when "ItemFamily" then link_to_delete_remote object, item_family_path(object), :name => "item family" if permit? User::ACCOUNT_ADMIN
    when "ItemType" then link_to_delete_remote object, item_type_path(object), :name => "item type" if permit? User::MANAGER and object.skus.count == 0
    when "Invoice" then link_to_delete_remote object, invoice_path(:id => object, :page => params[:page], :escape => false), :name => "invoice"  if permit? "financials_full"
    when "InvoiceItem" then link_to_delete_remote object, invoice_invoice_item_path(object.invoice, object), :name => "invoice item" if permit? 'financials_full'
    when "IpWhiteListEntry" then link_to_delete_remote object, site_ip_white_list_entry_path(object.site_id, object, :site_id => object.site_id), :name => "ip white list entry"
    when "Job" then link_to_delete_remote(object, job_path(:id => object, :project_id => object.project_id, :page => params[:page], :escape => false), options) if permitted?(:jobs, :destroy)
    when "JobLotExpiry" then link_to_delete_remote object, job_job_lot_expiry_path(:job_id => object.job_id, :id => object.id, :page => params[:page], :escape => false), :name => "line" if permit? User::LEAD
    when "JobReconciliationCount" then link_to_delete_remote object, job_reconciliation_count_path(:id => object.id)
    when "Line" then link_to_delete_remote object, site_line_path(:site_id => object.site_id, :id => object.id, :page => params[:page], :escape => false), :name => "line" if permit? User::SUPER_USER
    when "LineReconciliationItem" then  link_to_delete_remote object, line_reconciliation_line_reconciliation_item_path(:line_reconciliation_id => object.line_reconciliation_id, :id => object.id, :unit_of_measure => params[:unit_of_measure]) if permit? User::LEAD
    when "OverheadItem" then link_to_delete_remote object, site_overhead_item_path(object.site_id, object), :name => "overhead item" if permit? "financials_full"
    when "PalletCharge" then link_to_delete_remote object, scenario_charge_pallet_charge_path(object.scenario_charge, object) if permit? "financials_full"
    when "Production" then
      link_to_delete_remote( object,
                            job_production_path(:job_id => object.job_id, :id => object, :page => params[:page], :escape => false),
                            :name => "production detail") if permit? User::LEAD
    when "Project" then
      link_to_delete_remote( object,
                            project_path(:id => object, :page => params[:page], :escape => false),
                            :name => "project", :'data-bad-with' => "$('project_index_filters').serialize()") if permit? User::MANAGER
    when "ProjectAttachment" then link_to_delete project_project_attachment_path(object.project, object) if permit? User::MANAGER
    when "ProjectCharge" then link_to_delete_remote object, scenario_charge_project_charge_path(object.scenario_charge, object) if permit? "financials_full"
    when "QcTemplate" then
      link_to_delete_remote object, qc_template_path(object), :name => "quality control template" if permit? User::MANAGER
    when "QcTemplateItem" then link_to_delete_remote object, qc_template_qc_template_item_path(object.qc_template, object), :name => "quality control template checks" if permit? User::MANAGER
    when "Quote" then link_to_delete_remote object,
      quote_path(:id => object.id, :page => params[:page], :escape => false),
      :name => "quote" if permit? "financials_full"
    when "QuoteAttachment" then link_to_delete quote_quote_attachment_path(object.quote_id, object) if permit? "financials_full"
    when "QuotedBomItem" then link_to_delete_remote object, scenario_quoted_bom_item_path(object.scenario_id, object), :name => "subcomponent" if permit? "financials_full"
    when "RackLocation" then link_to_delete_remote object,
      site_rack_location_path(:site_id => object.site, :id => object, :page => params[:page], :escape => false),
      :confirm => options[:confirm] if permit? User::SUPER_USER
    when "ReceiveOrderAttachment" then link_to_delete receive_order_receive_order_attachment_path(object.receive_order, object) if permit? "supervisor"
    when "ReceiveOrderItem" then link_to_delete_remote object, receive_order_receive_order_item_path(object.receive_order, object)
    when "ReceiptItem" then link_to_delete_remote object, receipt_receipt_item_path(:receipt_id => object.receipt, :id => object, :page => params[:page], :escape => false)
    when "ReceiptAttachment" then link_to_delete receipt_receipt_attachment_path(:receipt_id => object.receipt, :id => object) if permit? "supervisor or financials_full"
    when "RejectedItem" then link_to_delete_remote object, job_rejected_item_path(object.job, object), :name => "reject"
    when "RequiredItem" then link_to_delete_remote object, required_item_path(object), :name => "item"
    when "RuiObject" then link_to_delete rui_object_path(object)
      # done in the view
      #    when "ScenarioCharge" then link_to_delete_remote object, scenario_scenario_charge_path(object.scenario, object), :name => "pricing", :title => title(:icon_path => "icons/delete.png", :title => "Delete Pricing"), :class => "button" if permit? "financials_full"
    when "ScenarioToScenarioAttachment" then link_to_delete scenario_to_scenario_attachment_path(object)
    when "SelectedItem" then link_to_delete_remote object, selected_item_path(object)
    when "SelectedPallet" then link_to_delete_remote object, selected_pallet_path(object)
    when "Shift" then link_to_delete_remote object, shift_path(object, :site_id => object.site_id, :page => params[:page]) if object.can_destroy?
    when "ShipmentAttachment" then link_to_delete shipment_shipment_attachment_path(object.shipment, object) if permit? "supervisor"
    when "PalletShipment" then link_to_delete_remote object, shipment_pallet_shipment_path(object.shipment, object)
    when "UnitShipment" then link_to_delete_remote object, shipment_unit_shipment_path(object.shipment, object)
    when "ShipOrder" then link_to_delete ship_order_path(object)
    when "ShipOrderAttachment" then link_to_delete ship_order_ship_order_attachment_path(object.ship_order, object) if permit? "supervisor"
    when "ShipOrderItem" then link_to_delete_remote object, ship_order_ship_order_item_path(object.ship_order, object)
    when "Site" then link_to_delete_remote object, site_path, :name => "site" if permit? User::SUPER_USER
    when "Sku" then link_to_delete sku_path(object) if permit? 'supervisor'
    when "SkuAttachment" then link_to_delete sku_sku_attachment_path(object.sku, object) if permit? "supervisor or financials_full"
    when "SsccSequence" then link_to_delete_remote object, sscc_sequence_path(object), options
    when "SubcomponentConsumption" then link_to_delete_remote object, subcomponent_consumption_path(object) if permit? User::LEAD
    when "TimeReport" then
      link_to_delete_remote( object,
                            job_time_report_path(:job_id => object.job_id, :id => object, :page => params[:page], :escape => false),
                            :name => _("time record")) if permit? User::LEAD
    when "TimeCard" then link_to_delete_remote( object, time_card_path(object, :to => options[:to], :from => options[:from])) if permit? "supervisor"
    when "Vendor" then link_to_delete_remote object, vendor_path(object, :page => params[:page]) if permitted? :vendors, :destroy
    when "WageDetail" then link_to_delete_remote object, scenario_wage_detail_path(object.scenario, object) if permit? User::LEAD
    else ""
    end
  end

  def link_to_delete_bookmark_user bookmark_user
    link_to_delete_remote bookmark_user, bookmark_user_path(bookmark_user)
  end

  # Used as a drop-in replacement for link_to_edit, to make an Ajax edit instead
  # Default value for title means that you're using this for an inline-table editing link.
  def link_to_edit_remote object, path, title=edit_title
    if title == edit_title
      # table edit action
      js = <<-HTML
        $$("##{table_row_id(object)} div.actions span.spinner").each(function(s) { s.show() });
        $$("##{table_row_id(object)} div.actions a").each(function(s) { s.hide() });
      HTML
      link_to(title, path,
        { :'data-bad-before' => "#{js}", :class => "no_print", :id => "edit_#{object.class.to_s.underscore}_#{object.id}", :title => _("Edit"), :remote => true })
    else
      # show edit action
      #link_to title(:title => title, :icon_path => "icons/edit.png").html_safe, path, {:class => "no_print pm_button ", :id => "edit_#{object.class.to_s.underscore}_#{object.id}", :remote => true}
      button title, icon: 'edit', class: 'no_print pm_button', html: { href: path, :id => "edit_#{object.class.to_s.underscore}_#{object.id}", 'data-remote' => true }
    end
  end

  def link_to_edit_object object, options={}
    case object.class.to_s
    when "Account" then link_to_edit_remote object, edit_account_path(:section => options[:section]), s_("ACCOUNT_CONFIG_BTN|Edit Account Information") if permit? User::ACCOUNT_ADMIN
    when "Announcement" then link_to_edit edit_announcement_path(object), title(:title => "Edit Announcement", :icon_path => "icons/edit.png"), {:class => "pm_button"} if permit? User::SUPER_USER
    when "AssemblyStep" then link_to_edit_remote object, edit_assembly_procedure_assembly_step_path(object.assembly_procedure, object) if permit? "lead or financials_full"
    when "AssemblyItemTemplate" then link_to_edit_remote object, edit_assembly_item_template_path(object) if permit? User::MANAGER
    when "AssemblyProcedure" then link_to_edit_remote object, edit_assembly_procedure_path(object), s_("ASSEMBLY_PROCEDURE_LBL|Edit Production Details") if permit? "lead or financials_full"
    when "BadgeType" then link_to_edit_remote object, edit_site_badge_type_path(:site_id => object.site_id, :id => object.id, :page => params[:page]) if permit? "financials_full"
    when "BlindCount" then link_to_edit_remote object, edit_blind_count_path(object), s_("BLIND_COUNT_BTN|Edit Blind Count")
    when "BomItem" then
      if permit? "supervisor"
        if object.substitute_for
          link_to_edit_remote object, edit_sku_substitute_bom_item_path(object.sku, object)
        else
          link_to_edit_remote object, edit_sku_bom_item_path(object.sku, object)
        end
      end
    when "Bookmark" then link_to_edit_remote object, edit_bookmark_path(object), s_("BOOKMARK_BTN|Edit bookmark details") if object.modifiable_by?(current_user)
    when "Bubble" then link_to_edit_remote object, edit_bubble_path(object), "Edit Bubble Details" if permit? User::SUPER_USER
    when "Break" then link_to_edit_remote object, edit_job_break_path(object.job, object) if permit? User::LEAD
    when "Carrier" then link_to_edit_remote object, edit_carrier_path(object), s_("CARRIER_BTN|Edit Carrier Information") if permitted? :carriers, :edit
    when "Company" then link_to_edit_remote object, edit_company_path, s_("COMPANY_BTN|Edit Company Information") if permit? User::SUPER_USER
    when "CycleCountItem" then link_to_edit_remote object, edit_cycle_count_item_path(object)
    when "Consignee" then link_to_edit_remote object, edit_consignee_path(object), s_("CONSIGNEE_BTN|Edit Consignee Information") if permitted? :consignees, :edit
    when "CustomOutputMapping" then link_to_edit_remote object, edit_custom_output_mapping_path(options), s_("CUSTOM_OUTPUT_MAPPING_BTN|Edit Custom Output Mappings")
    when "Customer" then link_to_edit_remote object, edit_customer_path(object), s_("CUSTOMERS|Edit Customer Information") if permit? "financials_full or manager"
    when "CustomerAccessConfiguration" then link_to_edit_remote object, edit_customer_customer_access_configuration_path(object.customer_id), "Edit Access Configuration" if permit? User::SUPER_USER
    when "CustomOutput" then  link_to_edit edit_custom_output_path(object)
    when "CycleCount" then link_to_edit_remote object, edit_cycle_count_path(object), s_("CYCLE_COUNT_BTN|Edit Cycle Count")
    when "DiscrepancyReason" then link_to_edit_remote object, edit_discrepancy_reason_path(object) if permit? User::ACCOUNT_ADMIN
    when "DowntimeReason" then link_to_edit_remote object, edit_downtime_reason_path(object) if permit? User::ACCOUNT_ADMIN
    when "EdiStatusLocation" then link_to_edit_remote object, edit_edi_status_location_path(object.id)
    when "EdiMapping" then link_to_show(image_tag("icons/file-edit.png"), edi_mapping_edi_mapping_items_path(object.id), options) if permit? "manager and mod_edi"
    when "EdiMappingItem" then link_to_edit_remote object, edit_edi_mapping_item_path(object)
    when "EdiConfiguration" then link_to_edit_remote object, edit_edi_configuration_path(object, options), s_("EDI_CONFIG_BTN|Edit EDI Configuration")
    when "EmailDomain" then link_to_edit_remote object, edit_email_domain_path(object)
    when "ExpectedPalletMove" then link_to_edit_remote object, edit_move_expected_pallet_move_path(object.move, object)
    when "ExpectedUnitMove" then link_to_edit_remote object, edit_move_expected_unit_move_path(object.move, object) if permit? "mod_inventory"
    when "FloorLocation" then link_to_edit_remote object, edit_site_floor_location_path(:site_id => object.site_id, :id => object.id, :page => params[:page]) if permit? User::SITE_ADMIN
    when "InboundStockTransferOrder" then link_to_edit_remote object, edit_inbound_stock_transfer_order_path(object), s_("INBOUND_STOCK_TRANSFER_ORDER_BTN|Edit Order") if permit? User::MANAGER
    when "Invoice" then link_to_edit_remote object, edit_invoice_path(object), s_("INVOICE_BTN|Edit Invoice Information") if permit? "financials_full"
    when "InvoiceItem" then link_to_edit_remote object, edit_invoice_invoice_item_path(object.invoice, object) if permit? "financials_full"
    when "IpWhiteListEntry" then link_to_edit_remote object, edit_site_ip_white_list_entry_path(object.site_id, object)
    when "ItemCategory" then link_to_edit_remote object, edit_item_category_path(object) if permit? User::MANAGER
    when "ItemCart" then link_to_edit_remote object, edit_item_cart_path, "Edit Item Cart Information" if permit? User::LEAD
    when "ItemFamily" then link_to_edit_remote object, edit_item_family_path(object) if permit? User::ACCOUNT_ADMIN
    when "ItemType" then link_to_edit_remote object, edit_item_type_path(object) if permit? User::MANAGER
    when "Job" then link_to_edit_remote object, edit_job_path(object), _("Edit Job Information")
    when "JobReconciliationCount" then link_to_edit_remote object, edit_job_reconciliation_count_path(object)
    when "JobLotExpiry" then link_to_edit_remote object, edit_job_job_lot_expiry_path(:job_id => object.job_id, :id => object.id, :page => params[:page]) if permit? User::LEAD
    when "Line" then link_to_edit_remote object, edit_site_line_path(:site_id => object.site_id, :id => object.id, :page => params[:page]) if permit? User::MANAGER
    when "LineReconciliationItem" then link_to_edit_remote object, edit_line_reconciliation_line_reconciliation_item_path(:line_reconciliation_id => object.line_reconciliation_id, :id => object.id, :page => params[:page], :unit_of_measure => params[:unit_of_measure]) if permit? User::LEAD
    when "Move" then link_to_edit_remote object, edit_move_path(object), "Edit Move" if permit? "mod_inventory"
    when "OutboundStockTransfer" then link_to_edit_remote object, edit_outbound_stock_transfer_path(object), s_("OUTBOUND_STOCK_TRANSFERS_BTN|Edit Outbound Stock Transfer")
    when "OverheadItem" then link_to_edit_remote object, edit_site_overhead_item_path(object.site, object) if permit? "financials_full"
    when "OverheadWorksheet" then link_to_edit_remote object, edit_overhead_worksheet_path(object), s_("OVERHEAD_WORKSHEET_BTN|Edit Overhead Worksheet") if permit? "lead or financials_full"
    when "PalletCharge" then link_to_edit_remote object, edit_scenario_charge_pallet_charge_path(object.scenario_charge, object) if permit? "financials_full"
    when "PalletShipment" then link_to_edit_remote object, edit_shipment_pallet_shipment_path(object.shipment, object) if permit? "mod_inventory"
    when "Production" then link_to_edit_remote object, edit_job_production_path(object.job, object) if permit? User::LEAD
    when "Project" then link_to_edit_remote object, edit_project_path(object), _("Edit Project Information") if permit? User::MANAGER
    when "ProjectCharge" then link_to_edit_remote object, edit_scenario_charge_project_charge_path(object.scenario_charge, object) if permit? "financials_full"
    when "QcTemplate" then link_to_edit_remote object, edit_qc_template_path(object), "Edit Template" if permit? User::MANAGER
    when "QcTemplateItem" then link_to_edit_remote object, edit_qc_template_qc_template_item_path(object.qc_template, object) if permit? User::MANAGER
    when "QuotedBomItem" then link_to_edit_remote object, edit_scenario_quoted_bom_item_path(object.scenario, object) if permit? "financials_full"
    when "Quote" then link_to_edit_remote object, edit_quote_path(object), s_("ESTIMATES_BTN|Edit Estimate Information") if permit? "financials_full"
    when "RackLocation" then link_to_edit_remote object, edit_site_rack_location_path(:site_id => object.site_id, :id => object.id, :page => params[:page]) if permit? "site_admin and mod_inventory"
    when "Receipt" then link_to_edit_remote object, edit_receipt_path(object), s_("BUTTON|Edit Receipt Information") if permit? "mod_inventory"

    when "ReceiptItem" then
      roles = ["mod_inventory"]
      roles << (object.receipt.received ? User::MANAGER : User::LEAD)
      link_to_edit_remote(object, edit_receipt_receipt_item_path(object.receipt, object)) if permit? roles.join(" and ")

    when "ReceiveOrder" then link_to_edit_remote object, edit_receive_order_path(object), s_("RECEIVE_ORDER_LBL|Edit Receive Order Information") if permit? "mod_inventory"
    when "ReceiveOrderItem" then link_to_edit_remote object, edit_receive_order_receive_order_item_path(object.receive_order, object) if permit? "mod_inventory"
    when "RejectedItem" then link_to_edit_remote object, edit_job_rejected_item_path(object.job, object)
    when "RejectReason" then link_to_edit_remote object, edit_reject_reason_path(object) if permit? User::MANAGER
    when "RequiredItem" then link_to_edit_remote object, edit_required_item_path(object) if permit? "mod_inventory"
    when "RuiObject" then link_to_edit_remote object, edit_rui_object_path(object)
    when "ScenarioCharge" then link_to_edit_remote object, edit_scenario_scenario_charge_path({:scenario_id => object.scenario_id, :id => object.id, :scenario_view => options[:scenario_view]}), s_("SCENARIO_BTN|Edit Pricing") if permit? "financials_full"
    when "ScenarioLossReason" then link_to_edit_remote object, edit_scenario_loss_reason_path(object) if permit? User::ACCOUNT_ADMIN
    when "Shift" then link_to_edit_remote object, edit_shift_path(object, :site_id => object.site_id)
    when "ShipOrder" then link_to_edit_remote object, edit_ship_order_path(object), s_("SHIP_ORDER_LBL|Edit Ship Order Information") if permit? "supervisor and mod_inventory"
    when "Shipment" then link_to_edit_remote object, edit_shipment_path(object), s_("SHIPMENT_BTN|Edit Shipment Information") if permit? "mod_inventory"
    when "ShipOrderItem" then link_to_edit_remote object, edit_ship_order_ship_order_item_path(object.ship_order, object) if permit? "supervisor and mod_inventory"
    when "Site" then link_to_edit_remote object, edit_site_path, s_("SITE_BTN|Edit Site Information") if permit? User::SITE_ADMIN
#    when "Sku" then link_to_edit_remote object, edit_sku_path(object), "Edit Item Information" if permit? "supervisor"
    when "Sku" then link_to_edit_remote object, edit_sku_path(object), s_("SKU_BTN|Edit Item Information") if permit? "supervisor"
    when "SsccSequence" then link_to_edit_remote object, edit_sscc_sequence_path(object)
    when "SubcomponentConsumption" then link_to_edit_remote( object, edit_subcomponent_consumption_path(object)) if permit? User::LEAD
    when "TimeReport" then link_to_edit_remote object, edit_job_time_report_path(object.job_id, object) if permit? User::LEAD
    when "TimeCard" then link_to_edit_remote object, edit_time_card_path(object) if permit? "supervisor"
    when "UnitShipment" then link_to_edit_remote object, edit_shipment_unit_shipment_path(object.shipment, object) if permit? "mod_inventory"
    when "Vendor" then link_to_edit_remote object, edit_vendor_path(object), s_("VENDOR_BTN|Edit Vendor Information") if permitted?(:vendors, :edit)
    when "WageDetail" then link_to_edit_remote object, edit_scenario_wage_detail_path(object.scenario, object) if permit? "lead or financials_full"
    when "Wms::PlannedShipment" then link_to_edit_remote object, edit_wms_planned_shipment_path(object), s_("PLANNED_SHIPMENT_BTN|Edit Planned Shipment Information") if permitted? "planned_shipment", "edit"
    else ""
    end
  end

  def link_to_new(path, clazz, html_options={})
    target = clazz.model_name.human
    text = _("Create {{{new_object}}}").i(:new_object => target)

    button(text,
           href: path,
           icon: 'add',
           html: html_options,
           class: 'btn-link')
  end

  def link_to_new_object clazz, options={}
    options[:new_params] ||= {}
    case clazz.to_s
    when "Announcement" then link_to_new new_announcement_path, clazz if permit? User::SUPER_USER
    when "Bookmark" then link_to_new new_bookmark_path, clazz if permit? User::LEAD
    when "Bubble" then link_to_new new_bubble_path, clazz if permit? User::SUPER_USER
    when "Carrier" then link_to_new new_carrier_path, clazz if permitted? :carriers, :new
    when "Consignee" then link_to_new new_consignee_path, clazz if permitted? :consignees, :new
    when "Customer" then link_to_new new_customer_path, clazz, options if permit? User::MANAGER
    when "CustomOutput" then link_to_new new_custom_output_path, clazz, options if permit? User::SUPER_USER
    when "CycleCount" then link_to_new new_cycle_count_path, clazz, options if permit? "supervisor and mod_inventory"
    when "InventoryDiscrepancy" then link_to_new new_inventory_discrepancy_path(options), clazz if permit? "mod_inventory and site_admin and minimum_inventory_adjustment_role"
    when "Invoice" then link_to_new new_invoice_path(:customer_id => options[:customer_id]), clazz if permit? "financials_full"
      #    when "Job" then # hardcoded link_to(title(:title => "Repeating Job", :icon_path => "icons/add.png"), new_job_path(options[:new_params]), {:title => "Create new Jobs...", :class => 'pm_button'}.merge(options)) if permit? "supervisor"
    when "Move" then link_to_new moves_path, clazz, {:href => moves_path, :'data-method' => :post} if permit? "mod_inventory"
    when "QcTemplate" then link_to_new new_qc_template_path, clazz if permit? User::ACCOUNT_ADMIN
    when "Quote" then link_to_new new_quote_path(options.copy_values(:customer, :customer_name)), clazz, options if permit? "financials_full"
    when "Receipt"  then link_to_new new_receipt_path(options), clazz if permit? "mod_inventory"
    when "ReceiveOrder"  then link_to_new new_receive_order_path(options), clazz if permit? "mod_inventory" and permitted?('receive_orders', 'new')
    when "Site" then link_to_new new_site_path, clazz if permit? User::ACCOUNT_ADMIN
    when "Shipment" then link_to_new new_shipment_path(options), clazz if permit? "mod_inventory" and !permit? "enable_trailers"
    when "ShipOrder"  then link_to_new new_ship_order_path(options), clazz if permit? "mod_inventory" and permit? User::MANAGER
    when "Vendor" then link_to_new new_vendor_path, clazz if permitted? :vendors, :new
    else ""
    end
  end

  # TODO: Incorporate into framework
  def link_to_new_project
    link_to_new new_project_path, Project
  end

  # TODO: Incorporate into framework
  def link_to_new_site account
    link_to_new new_site_path, Site if permit? User::ACCOUNT_ADMIN
  end

  # TODO: Incorporate into framework
  def link_to_new_sku html_options={}
    link_to_new new_sku_path, Sku, html_options if permit? "supervisor"
    #    html_options[:title] ||= "Create a new Item..."
    #    html_options[:class] ||= 'pm_button'
    #    link_to title(:title => "Create Item", :icon_path => "icons/add.png"), new_sku_path, html_options if permit? "supervisor"
  end

  def link_to_report_object(model, id, options={})
    #link_to(id, url_for(:controller => name.singularize.constantize, :action => :show, :id => id))
    #link_to(id, self.send(model.underscore.downcase.singularize + "_path",options.merge(:id => id)))
    options[:missing_id] ||= ""
    return options[:missing_id] unless id
    link_to_object model.classify.constantize.find(id), :site_id => current_user.site_id, :show_id_only => true
  end

  # Should be used by all link_to methods.
  # :title is for the tooltip
  def link_to_show(link, path, options={})
    options.delete(:title) if options[:no_tooltip]
    options[:class] = options[:class] ? "info_link #{options[:class]}" : "info_link"
    return link if options.has_key?(:is_customer) and options[:is_customer]

    link = options.delete(:link_title) if options[:link_title]

    link_to link, path, options
  end

  def manage_pick_list_path pick_list
    if pick_list.reservable_type == 'Project'
      pick_lists_path(project_id: pick_list.reservable_id)
    else
      ship_order_reservations_path(ship_order_ids: [pick_list.reservable_id])
    end
  end

  def link_to_object object, options={}
    case object.class.to_s
    when "Account" then link_to_account object, options
    when "BlindCount" then link_to_blind_count(object)
    when "Bookmark" then link_to_bookmark object, options
    when "Bubble" then link_to_bubble object, options
    when "Carrier" then link_to_carrier object, options
    when "Consignee" then link_to_consignee object, options
    when "Customer" then link_to_customer object, options
    when "CycleCount" then link_to_cycle_count object, options
    when "DockAppointment" then link_to_dock_appointment object, options
    when "EdiMapping" then link_to_edi_mapping object, options
    when "InboundStockTransferOrder" then link_to_inbound_stock_transfer_order object, options
    when "InboundStockTransfer" then link_to_inbound_stock_transfer object, options
    when "InventoryDiscrepancy" then link_to_inventory_discrepancy object, options
    when "Invoice" then link_to_invoice object, options
    when "ItemFamily" then link_to_item_family object, options
    when "Job" then link_to_job object, options
    when "JobReconciliation" then link_to_job_reconciliation object, options
    when "Line" then link_to_line object, options
    when "Move" then link_to_move object, options
    when "OutboundStockTransfer" then link_to_outbound_stock_transfer object, options
    when "OutboundStockTransfer::Pallet" then link_to_outbound_stock_transfer_pallets object, options
    when "PalletMove" then link_to_move object.move, options
    when "PickList" then link_to_pick_list object, options
    when "Production" then link_to_job object.job, options
    when "Project" then link_to_project object, options
    when "QcSheet" then link_to_qc_sheet object, options
    when "Quote" then link_to_quote object, options
    when "Receipt" then link_to_receipt object, options
    when "ReceiptItem" then link_to_receipt_item object, options
    when "ReceiveOrder" then link_to_receive_order object, options
    when "Scenario" then link_to_scenario object, options
    when "ShipOrder" then link_to_ship_order object, options
    when "Shipment" then link_to_shipment object, options
    when "Site" then link_to_site object, options
    when "Sku" then link_to_sku_with_portal_access object, options
    when "UnitMove" then link_to_move object.move, options
    when "User" then link_to_user object, options
    when "Vendor" then link_to_vendor object, options
    when "OutboundTrailer" then link_to_outbound_trailer object, options
    when "Wms::PlannedShipment" then link_to_wms_planned_shipment object, options
    end
  end

  def link_to_line line, options={}
    return "--" unless line
    h line.location.name
  end

  def link_to_wms_planned_shipment planned_shipment, options={}
    link_title = options[:title] || s_("PLANNED_SHIPMENT_LBL|Planned Shipment {{{planned_shipment_id}}}").i(:planned_shipment_id => planned_shipment.id)
    link_to_show(link_title, wms_planned_shipment_path(planned_shipment.id), options)
  end

  def link_to_wms_move_plan presenter, options={}
    link_title = options[:title] || "Pick Plan #{presenter.pick_plan.id}"
    link_to_show(link_title, wms_show_for_job_pick_plan_path(presenter.job), options)
  end

  def link_to_bookmark bookmark, options={}
    link_to_show(edit_title, bookmark_path(bookmark.id), options) unless permit? User::CUSTOMER
  end

  def link_to_bubble bubble, options={}
    link_to_show(image_tag("icons/file-edit.png", :alt => "Edit"), bubble_path(bubble.id), options)
  end

  def link_to_bookmarks user, options={}
    # anchor tag is necessary for the non link to preserve class styling
    return "<a>Bookmarks</a>" if user.customer?
    link_to s_("MENU|Bookmarks"), bookmarks_path
  end

  def link_to_report_with_bookmark bookmark, options={}
    name = options[:truncate_length] ? truncate(bookmark.name, :length => options.delete(:truncate_length)) : bookmark.name
    options[:id] = "link_to_#{bookmark.name}"
    options[:title] = bookmark.name
    link_to(name, bookmark.url, options)
  end

  # Customer
  def link_to_customer object, options={}
    return s_('LBL|No customer') unless object
    name = options[:name] || object.name
    name = truncate(name, :length => options.delete(:truncate_length)) if options[:truncate_length]
    options[:title] ||= h(object.name)
    link_title = options.delete(:link_title) || h(name)
    return link_to_show(link_title, customer_path(object.id), options) if permit? User::MANAGER
    link_title
  end

  def link_to_cycle_count object, options={}
    return '' unless object
    options[:title] ||= h(object.id)
    link_title = options.delete(:link_title) || s_("LINK_LBL|Cycle Count {{{cycle_count_id}}}").i(:cycle_count_id => object.id)
    return link_to_show(h(link_title), cycle_count_path(object.id), options) if permit? "supervisor and mod_inventory"
    link_title
  end

  def link_to_dock_appointment object, options={}
    link_to s_("DOCK_APPOINTMENT_LINK|Dock Appointment {{{dock_appointment_id}}}").i(:dock_appointment_id => object.id), dock_appointment_path(object)
  end

  def link_to_edi_mapping object, options={}
    return link_to( s_('LINK_LBL|No mapping'), edi_settings_path) unless object
    options[:title] ||= h(object.id)
    link_title = options.delete(:link_title) || object.customer_product_code
    return link_to_show(h(link_title), edi_mapping_edi_mapping_items_path(object.id), options) if permit? "manager and mod_edi"
    link_title
  end

  def link_to_inbound_stock_transfer object, options={}
    return '' unless object
    options[:title] ||= h(object.id)
    link_title = options.delete(:link_title) || s_("LINK_LBL|IST {{{ist_id}}}").i(:ist_id => object.id)
    return link_or_text(h(link_title), object, inbound_stock_transfer_path(object.id), options) if permitted? "inbound_stock_transfers", "show"
    link_title
  end

  def link_to_inventory_discrepancy object, options={}
    return 'No inventory discrepancy' unless object
    name = "Adjustment #{object.id}"
    name = truncate(name, :length => options.delete(:truncate_length)) if options[:truncate_length]
    #options[:title] ||= h(object.name)
    return link_to_show(h(name), inventory_discrepancy_path(object.id), options) if permit? "supervisor or financials_read"
    h(object.name)
  end

  def link_to_consignee object, options={}
    return s_('LBL|No consignee') unless object
    name = object.name
    name = truncate(name, :length => options.delete(:truncate_length)) if options[:truncate_length]
    options[:title] ||= h(object.name)
    return link_to_show(h(name), consignee_path(object.id), options) if permit? "supervisor or financials_read"
    h(object.name)
  end

  def link_to_consignee_by_name name, options={}
    consignee = current_user.site.consignees.find_by_name(name)
    consignee ? link_to_consignee(consignee) : name
  end

  # Carrier
  def link_to_carrier object, options={}
    return s_('CARRIER_LBL|No carrier') unless object
    options[:truncate_length] ||= 18
    options[:title] ||= h(object.name)
    link_title = options.delete(:link_title) || truncate(object.name, :length => options.delete(:truncate_length))
    link_to_show h(link_title), carrier_path(object.id), options
  end

  # Vendor
  def link_to_vendor object, options={}
    return s_('SKU_LBL|No vendor') unless object
    options[:truncate_length] ||= 18
    options[:title] ||= h(object.name)
    if options[:link_title]
      link_to_show(h(options.delete(:link_title)), vendor_path(object.id), options)
    else
      link_to_show(h(truncate(object.name, :length => options.delete(:truncate_length))), vendor_path(object.id), options)
    end
  end

  # Invoices
  def link_to_invoice object, options={}
    return s_('INVOICE_LINK|No invoice') unless object
    link_or_text s_("INVOICE_LINK|Invoice {{{invoice_id}}}").i(:invoice_id => object.id), object, invoice_path(object.id), options
  end

  def link_to_move object, options={}
    return _('No move') unless object
    text = _("Move %{id}") % {:id => object.id}
    link_or_text text, object, move_path(object.id), options
  end

  def link_to_pick_list object, options={}
    return _('No pick list') unless object
    text = _("Pick List {{{id}}}").i(:id => object.id)
    link_or_text text, object, pick_list_path(object.id), options
  end

  # Invoice Items
  # TODO: Incorporate into framework
  def link_to_invoice_item_owner invoice_item
    return "" if invoice_item.jobs.empty?
    return link_to_project(invoice_item.jobs[0].project) +
      (invoice_item.jobs.size == 1 ? " - " + link_to_job(invoice_item.jobs[0]) : "")
  end

  # Jobs
  def link_to_job object, options={}
    text = _("Job {{{id}}}").i(:id => object.id)
    link = options[:link] ? options[:link] : text
    options[:title] ||= text

    return link if options[:is_customer] || (options[:site_id] && (object.site_id != options[:site_id]))
    link_to_show link, job_path(object), options
  end

  def link_to_job_reconciliation object, options={}
    return s_("LINK_LBL|No reconciliation") unless object
    link_to_show(s_("LINK_LBL|Job Reconciliation {{{job_reconciliation_id}}}").i(:job_reconciliation_id => object.id), job_reconciliation_path(object.id), options)
  end

  # Projects
  def link_to_project project, options={}
    LinkToObjectHelper::ProjectLinkBuilder.build project, self, options
  end

  # Quality Control Sheet
  def link_to_qc_sheet object, options={}
    return "No sheet" unless object
    link_to_show("#{object.name}", {:controller => :qc_sheets, :action => :edit, :id => object.id}.merge(options[:link]), options)
  end

  #Quality Control Templates
  def link_to_qc_template object, options={}
    return 'No template' unless object
    link_to_show("#{object.name}", qc_template_path(object.id), options)
  end

  # Quotes
  def link_to_quote object, options={}
    return 'No estimate' unless object
    link_to_show(h("##{object.id} - #{object.name}"), quote_path(object.id), options)
  end

  # Receipt
  def link_to_receipt object, options={}
    return _("No receipt") unless object

    text = _("Receipt %{id}") % {:id => object.id}
    link_title = options[:no_prefix] ? object.id.to_s : text
    if options[:site_id] && object.site_id != options[:site_id]
      link = link_title
    else
      link = link_to_show(link_title, receipt_path(object.id), options)
    end

    link
  end

  # Receipt Item
  def link_to_receipt_item object, options={}
    return "" unless object
    s_("LINK_LBL|Receipt Item {{{receipt_item_id}}}").i(:receipt_item_id => object.id)
  end

  def link_to_receive_orders receipt
    links = []
    receipt.receive_orders.each do |ro|
      link_title = ro.reference.blank? ? "#{ro.id}" : "#{ro.id} - #{ro.reference}"
      links << link_to_show(link_title, receive_order_path(ro.id), :title => s_("RECEIVE_ORDER_LINK_MSG|Click receive order to open"))
    end
    links.join(", ").html_safe
  end

  # Receive Order
  # The object parameter can be either an instance of a ReceiveOrder or the id of a ReceiveOrder
  def link_to_receive_order object, options={}
    return _('No receive order') unless object
    id = object.is_a?(ReceiveOrder) ? object.id : object
    text = _("Receive Order %{id}") % {:id => object.id}
    link_title = options.delete(:link_title) || text
    return link_title if options[:is_customer] || (options[:site_id] && (object.site_id != options[:site_id]))

    link_to_show(link_title, receive_order_path(id), options)
  end

  # Scenarios
  def link_to_scenario scenario, options={}
    return _('No scenario') unless scenario
    link_to_show(h(describe_scenario(scenario)), quote_path(scenario.quote_id), options)
  end

  def describe_scenario scenario
    s_("PROJECT_EDIT_LBL|{{{scenario_name}}} - Estimate {{{scenario_quote_id_number}}} - Item {{{item}}}").i(:scenario_name => scenario.name, :scenario_quote_id_number => scenario.quote_id, :item => scenario.item)
  end

  # ShipOrders
  def link_to_ship_order object, options={}
    return _("No ship order") unless object
    text = _("Ship Order %{id}") % {:id => object.id}
    link_title = options.delete(:link_title) || text
    if (options[:site_id] && object.site_id != options[:site_id]) || current_user.role == User::CUSTOMER
      link = h(link_title)
    else
      link = link_to_show(h(link_title), ship_order_path(object.id), options)
    end
    link
  end

  # Shipments
  def link_to_shipment object, options={}
    text = _("Shipment {{{id}}}").i(:id => object.id)
    link_title = options.delete(:link_title) || text
    if (options[:site_id] && object.site_id != options[:site_id]) || current_user.role == User::CUSTOMER
      h(link_title)
    else
      link_to_show(h(link_title), shipment_path(object.id), options)
    end
  end

  # OutboundTrailer
  def link_to_outbound_trailer object, options={}
    text = _("Trailer {{{id}}}").i(:id => object.id)
    link_title = options.delete(:link_title) || text
    if (options[:site_id] && object.site_id != options[:site_id]) || current_user.role == User::CUSTOMER
      h(link_title)
    else
      link_to_show(h(link_title), outbound_trailer_path(object.id), options)
    end
  end

  # Skus
  # This method should be phased out, use link_to_sku_with_portal_access instead
  def link_to_sku(object, options={})
    return _('No item') unless object
    options[:title] = h(object.description)
    link_title = options.delete(:link_title) || object.code
    link = link_to_show h(link_title), sku_path(object.id), options
    link << " - #{h object.description}".html_safe if options[:show_description]
    link
  end

  def link_to_sku_with_portal_access sku, options={}
    return 'No item' unless sku
    description_suffix = options[:show_description] ? " - #{sku.description}" : ""
    description_suffix = h(truncate(description_suffix, :length => options.delete(:description_length))) if options[:description_length]
    options[:title] = h(sku.description)
    link_title = h(options.delete(:link_title) || sku.code)
    link_title = options.delete(:prefix) + link_title if options.has_key?(:prefix)

    has_access_to_passed_account = !options[:site_id] || Site.find(options[:site_id]).account_id == sku.account_id
    if current_user.permit_item_information?(sku) && has_access_to_passed_account
      link = link_to_show link_title, sku_path(sku.id), options
    else
      link = link_title
    end
    link + description_suffix
  end

  # Users
  def link_to_user object, options={}
    return "Not Assigned" unless object
    h object.login
  end

  # DEPRECATED! Use link_to_remote_with_spinner instead
  #
  # required options:
  # :icon
  # :title
  # :path
  # :method
  def link_to_action_remote options={}
    options[:id] ||= get_unique_id
    options[:class] ||= ""
    options[:loading_title] ||= options[:title]

    complete_js = <<-HTML
      $$("##{options[:id]} span.spinner").each(function(s) { s.toggle() });
      $$("#link_#{options[:id]}").each(function(s) { s.toggle() });
    #{options[:'data-bad-complete']}
    HTML

    after_js = <<-HTML
      $$("##{options[:id]} span.spinner").each(function(s) { s.toggle() });
      $$("#link_#{options[:id]}").each(function(s) { s.toggle() });
    HTML

    link_options = {}
    link_options[:'data-bad-after'] = after_js
    link_options[:'data-bad-before'] = options[:'data-bad-before']
    link_options[:'data-bad-complete'] = options[:hide_spinner_on_complete] ? complete_js : options[:'data-bad-complete']
    link_options[:method] = options[:method]
    link_options[:confirm] = options[:confirm] if options[:confirm]
    link_options[:'data-bad-with'] = options[:'data-bad-with'] if options[:'data-bad-with']

    options[:spinner] ||= {}
    html = <<-HTML
      <span id="#{options[:id]}" style="#{options[:style]}">
    #{spinner options[:spinner].merge(:class => options[:class], :title => options[:loading_title])}
    #{link_to(title({ :title => h(options[:title]),
                      :icon_path => options[:icon_path] }),
              options[:path],
              link_options.merge({:id => "link_#{options[:id]}",
                                  :class => options[:class],
                                  :title => options[:tooltip_title],
                                  :remote => true}))}
      </span>
    HTML
    html.html_safe
  end

  # API compatible with ActionView::Helpers::PrototypeHelper#link_to_remote
  def link_to_remote_with_spinner name, url, options={}, spinner_options={}
    options[:id] ||= get_unique_id
    options[:remote] = true
    js = <<-HTML
      $$("#spinner_#{options[:id]} span.spinner").each(function(s) { s.toggle() });
      $$("##{options[:id]}").each(function(s) { s.toggle() });
    HTML

    options[:'data-bad-after'] = js
    options[:'data-bad-complete'] = js if options[:hide_spinner_on_complete]

    html = <<-HTML
      <span id="spinner_#{options[:id]}">
    #{spinner spinner_options}
    #{link_to(name, url, options)}
      </span>
    HTML

    html.html_safe
  end

  def link_to_javascript js, options={}
    options[:id] ||= get_unique_id
    options[:class] ||= ""

    html = <<-HTML
      <div id="#{options[:id]}">
    #{link_to_function(
          title(:icon_path => options[:icon_path], :title => options[:title]), js,
    :id => "link_#{options[:id]}", :class => options[:class])}
      </div>
    HTML
    html.html_safe
  end

  # DEPRECATED USED nui_helper#nui_button_export_csv instead
  def link_to_export_csv params, html_options = {}
    options = params.clone
    options[:format] = 'csv'
    html_options[:class] ||= 'no_print button'
    options[:title] ||= _('Export (CSV)')
    link_to(title(:icon_path =>'icons/export-csv.png', :title => options[:title]).html_safe, options, html_options)
  end

  # Create a busy-indicator (or a "spinner") that is hidden by default.
  # Pefect for toggling during an Ajax call!
  # DEPRECATED!
  def spinner options={}
    options[:id] = "id = '#{options[:id]}'" if options[:id]
    options[:class] = options[:class] ? "class = 'spinner #{options[:class]}'" : "class = 'spinner'"
    options[:style] ||= ""
    options[:colour] ||= "white"

    html = <<-HTML
      <span #{options[:id]} #{options[:class]} style="display:none;#{options[:style]}">
        <span></span>
      </span>
    HTML
    html.html_safe
  end

  # Use the anchor to display the spinner so the formatting for the links can be reused to render the spinner link properly
  # DEPRECATED!
  def button_spinner options={}
    options[:id] = "id = '#{h options[:id]}'" if options[:id]
    options[:class] = options[:class] ? "class = 'button #{options[:class]} spinner'" : "class = 'spinner'"
    options[:style] ||= ""

    html = <<-HTML
      <a #{options[:id]} #{options[:class]} style="display:none;#{options[:style]}">#{options[:title]}</a>
    HTML

    html.html_safe
  end

  # DEPRECATED: use the NUI/GOOGLE api
  def title options={}
    raise "don't use icon option" if options[:icon]
    raise "don't use after_icon option" if options[:after_icon]

    html = if options[:icon_path]
             "<span style='padding-left:20px;padding-top:2px;padding-bottom:1px;background-image: url(#{asset_path options[:icon_path]});'>"
           elsif options[:after_icon_path]
             "<span style='padding-right:20px;background-image: url(#{asset_path options[:after_icon_path]}); background-position: right;'>"
           else
             "<span>"
    end
    title = options[:title].blank? ? '&nbsp;' : h(options[:title])
    html << title
    html << "</span>"
    html.html_safe
  end

  # DEPRECATED - USED nui_helper#nui_button_popup instead
  def link_to_popup title, popupId = get_unique_id, options = {}, &block
    title += add_hover_to_link options
    options[:display] ||= "right"
    options[:onclick] = "showPopup(this, '#{popupId}', '#{options.delete(:display)}'); #{options[:onclick]};return false;"
    options[:class] ||= "button"
    popup_options = options.delete(:popup_options) || {}

    html = link_to title, "#", options

    return html unless block_given?

    html << popup(popupId, popup_options, &block)
    html.html_safe
  end

  def popup popupId, options ={}, &block
    options[:width] ||= 450
    middle_width = options[:width] - 40

    html = <<-HTML
      <div id='#{popupId}' class='popup' style="width:#{options[:width]}px;display:none;">
        <div style='background-color:white;position:absolute;left:20px;right:20px;bottom:20px;height:5px;'></div>
        <div class="top-left"></div>
        <div class="top-middle" style="width: #{middle_width}px"></div>
        <div class="top-right">#{image_tag "popup/dialog-close.gif", :style => "position: absolute; top: 10px; left: #{options[:width] - 26}px;cursor: pointer", :onclick => "closePopup('#{popupId}');return false;"}</div>
        <div style="width: #{options[:width]}px">
          <div class="middle-left"></div>
          <div class="middle-middle" style="padding-top: 13px; padding-bottom: 10px; width: #{middle_width}px">
    HTML

    html =  html.html_safe
    html << h(capture(&block).to_s) if block_given?

    end_html =<<-HTML
          </div>
          <div class="middle-right"></div>
        </div>
        <div class="bottom-left"></div>
        <div class="bottom-middle" style="width: #{middle_width}px"></div>
        <div class="bottom-right"></div>
        <iframe id='#{popupId}-frame' class='popup' src="/iframe.html" style="display:none;" frameborder=0 ALLOWTRANSPARENCY="true"></iframe>
      </div>
    HTML
    html << end_html.html_safe
  end

  def to_xml_link_for_object object
    case object.class.to_s
    when "Sku" then to_xml_link_for_sku object
    when "Project" then to_xml_link_for_project object
    when "Receipt" then to_xml_link_for_receipt object
    when "Shipment" then to_xml_link_for_shipment object
    end
  end

  def to_xml_link_for_sku sku
    to_xml_skus_path(:id => sku.id, :include => {:bom_items => nil}, :format => :xml)
  end

  def to_xml_link_for_project project
    to_xml_projects_path(:id => project.id, :include => { :customer => nil, :sku => {:include => {:customer => nil, :vendor => nil, :bom_items => {:include => {:subcomponent => nil}}}}}, :format => :xml)
  end

  def to_xml_link_for_receipt receipt
    to_xml_receipts_path(:id => receipt.id, :include => {:vendor => nil, :customer => nil, :carrier => nil, :receipt_items => {:include => {:sku => nil, :receive_order => {:include => {:project => nil}}}}}, :format => :xml)
  end

  def to_xml_link_for_shipment(shipment)
    to_xml_shipments_path(:id => shipment.id, :include => {:pallet_shipments => nil, :unit_shipments => nil}, :format => :xml)
  end

  def item_selector_popup sku_text_field_id, options={}
    item_selector_id = options[:item_selector_id] || 'item_selector'
    options[:allow_recipe_filters_subcomponent] = true unless options[:allow_recipe_filters_subcomponent] == false
    options[:allow_recipe_filters_finished_good] = true unless options[:allow_recipe_filters_finished_good] == false
    render :partial => "skus/item_selector", :locals => {:item_selector_id => item_selector_id, :sku_text_field_id => sku_text_field_id, :allow_recipe_filters_subcomponent => options[:allow_recipe_filters_subcomponent], :allow_recipe_filters_finished_good => options[:allow_recipe_filters_finished_good], :is_finished_good => options[:is_finished_good], :is_subcomponent => options[:is_subcomponent]}
  end

  def item_selector_link sku_text_field_id, item_selector_id = nil
    item_selector_id ||= "item_selector"

    link_to s_("ITEM_SELECTOR_LBL|Use item list"), "#", :id => "#{item_selector_id}_link", :class => "item_selector_link", :"data-sku-text-field" => sku_text_field_id, :"data-item-selector-id" => item_selector_id
  end

  private

  def link_or_text text, object, path, options
    return text if options[:site_id] && object.site_id != options[:site_id]
    link_to_show(text, path, options)
  end

  def link_to_outbound_stock_transfer_pallets object, options={}
    return "No outbound stock transfer pallet" if object.nil?
    link_to_outbound_stock_transfer(object.outbound_stock_transfer, options)
  end

  def link_to_outbound_stock_transfer object, options={}
    return s_("OUTBOUND_STOCK_TRANSFER_LBL|No outbound stock transfer") if object.nil?
    link = options[:link] ? options[:link] : s_("OUTBOUND_STOCK_TRANSFER_LBL|Outbound Stock Transfer {{{ost_id}}}").i(:ost_id => object.id)
    link_to_show(link, outbound_stock_transfer_path(object.id), options)
  end

  def link_to_blind_count(bc)
    link_to s_("BLIND_COUNT_LINK|Blind Count {{{blind_count_id}}}").i(:blind_count_id => bc.id), blind_count_path(bc)
  end

  def link_to_account object, options={}
    link = options[:link] ? options[:link] : h(object.name)
    if object == current_user.account
      object ? link_to(link, main_app.account_path, options) : 'No account'
    else
      link
    end
  end

  def link_to_site site, options={}
    return 'No site' unless site
    return site.name if site != current_user.site
    link_to h(site.name), main_app.site_path, options
  end

  def link_to_company company, options={}
    return 'No company' unless company
    return company.name if company != current_user.company
    link_to h(company.name), company_path, options
  end

  def link_to_inbound_stock_transfer_order object, options={}
    return "No inbound stock transfer order" if object.nil?
    text = options[:link] ? options[:link] : "Inbound Stock Transfer Order #{object.id}"
    link_or_text(text, object, inbound_stock_transfer_order_path(object.id), options)
  end

  def link_to_item_family object, options={}
    object ? h(object.name) : _("No item family")
  end

  def link_to_attachment_download(attachment)
      # model.document.identifier is the new, prefered api via carrierwave, model.filename is provided for backwards compatability with old attachmentfu attachments
      link_to(attachment.document.identifier || attachment.filename, attachment.document.url)
  end
end
