describe("Quoting.ChargeItemFormCtrl", function() {
  var ChargeItemFormCtrl = require("Quoting.ChargeItemFormCtrl")
  var ChargeItem = require("Quoting.ChargeItem")

  var ctrl, scope, q, quotesRepo, quote

  beforeEach(inject(function($rootScope, $q){
    scope = $rootScope.$new()
    quotesRepo = new Stub('addChargeItem')
    q = $q
    ctrl = new ChargeItemFormCtrl(scope, quotesRepo, {id: 10})
  }))

  describe('#newItem', function(){
    it('creates a new item', function(){
      ctrl.item = undefined
      ctrl.newItem()
      expect(ctrl.item).toBeDefined()
    })
  })

  describe('#copyFrom', function(){
    it('copies attributes from item', function(){
      var item = new ChargeItem({name: 'charge1'})
      ctrl.copyFrom(item)
      expect(ctrl.item.name).toEqual('charge1')
      expect(ctrl.item).not.toBe(item)
    })
  })

  describe('#addChargeItem', function() {
    var deferredAdd, itemToAdd

    beforeEach(function() {
      deferredAdd = q.defer()
      quotesRepo.addChargeItem.andReturn(deferredAdd.promise)

      ctrl = new ChargeItemFormCtrl(scope, quotesRepo, {id: 3})

      itemToAdd = new ChargeItem({ name: 'charge1' })
      ctrl.item = itemToAdd
    })

    it('calls quotesRepo.create', function(){
      ctrl.addChargeItem()
      expect(quotesRepo.addChargeItem).toHaveBeenCalledWith(3, itemToAdd)
    })

    it('broadcast quoting:chargeItemAdded when successful', function(){
      var spy = jasmine.createSpy('onChargeItemAddSuccess')
      var fromStorage = new ChargeItem({id: 1})

      scope.$on('quoting:chargeItemAdded', spy)

      ctrl.addChargeItem()
      deferredAdd.resolve(fromStorage)
      scope.$root.$digest()

      expect(spy).toHaveBeenCalledWith(jasmine.any(Object), fromStorage)
    })

    it('broadcast quoting:chargeItemAdded when successful', function(){
      var spy = jasmine.createSpy(ctrl, 'newItem')

      ctrl.addChargeItem()
      deferredAdd.resolve('ITEM')
      scope.$root.$digest()

      expect(spy).toHaveBeenCalled()
    })
  })
})
