require File.expand_path(File.dirname(__FILE__) + '/../test_helper')

class UserSessionsControllerTest < ActionController::TestCase


  test "destroy" do
    post :create, :user_session => {:login => default_user.login, :password => 'test'}
    assert_equal default_user,  assigns(:current_user)

    post :destroy
    assert_response :redirect
    assert_redirected_to no_access_page

    assert_routing '/logout', :controller => 'user_sessions', :action => 'destroy'
  end

  test 'user with expired password should be allowed to log out' do
    login_as default_user

    default_user.site.update_attribute  :setting_password_expiry, 1
    default_user.update_attribute :expired, true

    post :destroy

    assert_response :redirect
    assert_redirected_to new_user_session_path
  end

  def test_should_create_new
    user = default_user
    post :create, :user_session => {:login => user.login, :password => 'test'}

    assert assigns(:user_session)
    assert assigns(:user_session).errors.empty?
    assert_response :redirect
    assert_redirected_to workflows_path
    assert_nil flash[:error]
    assert_equal user, assigns(:current_user)
    assert_equal assigns(:user_session).user, @controller.send(:current_user_session).user
  end

  context "create fails" do
    setup do
      @user = User.make! :lead
      @user.site.update_attributes! :global_access => false
      @user.site.ip_white_list_entries.create! :description => 'test', :address => '1.1.1.1', :netmask => '255.255.255.255'
    end

    should "redirect to login" do
      post :create, :user_session => {:login => @user.login, :password => 'blooblahblee'}

      assert assigns(:user_session)
      assert_equal false, assigns(:user_session).errors.empty?
      assert_response :success
      assert_template 'user_sessions/new'
      assert_equal ["Login/Password combination is not valid"], flash[:error]
    end
  end

  test "should be able to log into a partitioned company" do
    default_company.prepare_schema
    default_company.copy_to_private_schema
    default_company.delete_from_public_schema

    post :create, :user_session => {:login => default_user.login, :password => 'test'}
    assert_response :redirect
    assert_redirected_to workflows_path
  end


  test "does not raise an exception when updating the user's announcement" do
    announcement = Announcement.create! :message => "message", :title => "title"
    user = default_user
    user.update_attributes! :show_announcement => false

    default_company.prepare_schema
    default_company.copy_to_private_schema
    default_company.delete_from_public_schema


    post :create, :user_session => {:login => user.login, :password => 'test'}
    assert_response :redirect

    post :create, :user_session => {:login => user.login, :password => 'test'}
    assert_response :redirect
    assert_redirected_to workflows_path
  end


  # login blocked due to ip whitelisting
  def test_should_create_new_no_access_ip_not_on_white_list
    user = User.make! :lead
    user.site.update_attributes! :global_access => false
    user.site.ip_white_list_entries.create! :description => 'test', :address => '1.1.1.1', :netmask => '255.255.255.255'

    post :create, :user_session => {:login => user.login, :password => user.password}

    assert_response :success
    assert assigns(:user_session)
    assert assigns(:user_session).errors.empty?
    assert_equal true, assigns(:user_session).new_record?
    assert_template 'user_sessions/new'
    assert_equal "You do not have access to PackManager from this location.", flash[:error]
    assert_equal nil, assigns(:current_user)
  end

  # login blocked due to role being integration
  def test_should_create_new_no_access_user_has_integration_role
    user = User.make! :integration

    post :create, :user_session => {:login => user.login, :password => user.password}

    assert_response :success
    assert assigns(:user_session)
    assert assigns(:user_session).errors.empty?
    assert_equal true, assigns(:user_session).new_record?
    assert_template 'user_sessions/new'
    assert_equal "You do not have access to PackManager.", flash[:error]
    assert_equal nil, assigns(:current_user)
  end

  def test_should_create_new_show_announcement_false
    announcement = Announcement.create! :message => "message", :title => "title"
    user = default_user
    user.update_attributes! :show_announcement => false, :announcement => announcement

    post :create, :user_session => {:login => user.login, :password => 'test'}

    assert_response :redirect
    assert_redirected_to workflows_path
  end

  def test_should_create_new_show_announcement_true
    announcement = Announcement.create! :message => "message", :title => "title"
    user = default_user

    post :create, :user_session => {:login => user.login, :password => 'test'}

    assert_response :redirect
    assert_redirected_to announcement_path(announcement)
  end

  def test_should_create_new_customer_user
    user = default_user
    #customer = user.account.customers.create! :name => "customer"
    user.update_attributes! :role => User::CUSTOMER, :financial_access => User::FINANCIAL_ACCESS_NONE, :customer => default_customer

    post :create, :user_session => {:login => user.login, :password => 'test'}

    assert_response :redirect
    assert_redirected_to announcements_path
  end

  def test_should_redirect_to_announcements_for_customer_user_if_logged_in_already
    user = login
    customer = user.account.customers.create! :name => "customer"
    user.update_attributes! :customer => customer, :role => User::CUSTOMER, :financial_access => User::FINANCIAL_ACCESS_NONE

    get :new

    assert_response :redirect
    assert_redirected_to announcements_path
  end
end
